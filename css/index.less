@import "reset.min.less";

html {
  font-size: 100px; /*640PX设计稿尺寸中：1REM=100PX*/
}

html, body {
  position: relative;
  z-index: -4;
  height: 100%;
  overflow: hidden;
  background: #F4F4F4;
  font-family: "Microsoft JhengHei";
}

.mainBox {
    position: relative;
    z-index: -3;
    margin: 0 auto;
    max-width: 640px;
    height: 100%;
    background: #FFF;
}
  
.loadingBox, .phoneBox, .messageBox, .cubeBox{
    display: none;
    position: relative;
    height: 100%;
    overflow: hidden;
}

/* loadingBox */
.loadingBox{
    background: #000;

    .title{
        position: absolute;
        left: 0;
        top: 50%;
        margin-top: -2.2rem;
        height: 1.4rem;
        width: 100%;
        color: #fff;
        text-align: center;

        h1{
            height: .75rem;
            font-size: .5rem;
        }

        h2{
            height: .45rem;
            letter-spacing: .04rem;
            font-size: .26rem;
        }
    }

    .progress{
        position: absolute;
        left: 50%;
        top: 50%;
        margin: .85rem 0 0 -2.3rem;
        width: 4.6rem;
        height: .3rem;
        background: #FFF;

        .cur{
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background: -webkit-linear-gradient(left bottom, #5CB85C 0%, #5CB85C 25%, #74C274 25%, #74C274 50%, #5CB85C 50%, #5CB85C 75%, #74C274 75%, #74C274 100%);
            background: linear-gradient(left bottom, #5CB85C 0%, #5CB85C 25%, #74C274 25%, #74C274 50%, #5CB85C 50%, #5CB85C 75%, #74C274 75%, #74C274 100%);
            background-size: .3rem .3rem;//需摆在background属性后面才生效
            animation: loadingMove .5s linear 0s infinite both;
            
            /*给CURRENT设置一个过渡动画:当我们在JS中控制它的宽度在变化的时候,给其一个平稳的过渡动画效果(而不是生硬的改变)*/
            transition: .3s;
        }
    }
}

@keyframes loadingMove {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 0 -.3rem;
    }
}

/* phoneBox */
.phoneBox{
    display: block;
    z-index: -2;
    background-size: cover;
    background: url(../images/zf_phoneBg.jpg);
    text-align: center;
    color: #FFF;

    h2{
        font-size: .5rem;
        margin-top: 1rem;
    }

    h3{ 
        display: none;
        margin-top: .2rem;
        line-height: .3rem;
        font-size: .3rem;
        
        letter-spacing: .05rem;
    }

    .answer{
        position: absolute;
        bottom: .3rem;
        left: 50%;
        margin-left: -2.6rem;
        width: 5.2rem;
        height: 3.6rem;
        background: url(../images/zf_phoneListen.png) no-repeat;
        background-size: 100% 100%;

        .markMove {
            position: absolute;
            right: -.06rem;
            bottom: .48rem;
            z-index: -1;
            box-sizing: border-box;
            width: 1.6rem;
            height: 1.6rem;
            border-radius: 50%;
            border: .03rem solid #0F0;
            animation: answerMove 1s linear infinite both;
        }
    
        .markLink {
            .markMove; //=>把MARK-MOVE的样式继承过来使用
            z-index: 1;
            border: none;
            border-radius: 0;
            animation: none;
        }
    }

    .hang{
        position: absolute;
        bottom: .3rem;
        left: 50%;
        margin-left: -2.6rem;
        width: 5.2rem;
        height: 6.59rem;
        background: url('../images/zf_phoneDetail.png') no-repeat;
        background-size: 100% 100%;

        //=>初始位置是在PHONE的底部（看不见：溢出内容隐藏），当点击接听按钮后，控制它从底下出来即可（JS中改变样式）
        transform: translateY(6.89rem);
        transition: .3s;

        .markLink {
            position: absolute;
            bottom: .26rem;
            left: 50%;
            z-index: 1;
            margin-left: -.8rem;
            width: 1.6rem;
            height: 1.6rem;
        }
    }
}
@keyframes answerMove {
    from {
      transform: scale(1.2);
    }
    to {
      transform: scale(0);
    }
}

/*MESSAGE*/
.messageBox {
    background: #EAEAEA;
  
    .wrapper {
      position: absolute;
      top: .2rem;
      left: 0;
      width: 100%;
      transition: .3s;
  
      li {
        position: relative;
        max-width: 3.6rem;
        padding: .25rem;
        margin-bottom: .4rem;
        border-radius: .1rem;
        line-height: .4rem;
        font-size: .26rem;
        opacity: 0;
  
        &.active {
          animation: messageListMove .3s linear both;
        }
  
        .pic {
          position: absolute;
          top: 0;
          width: .82rem;
          height: .82rem;
          border-radius: 50%;
        }
  
        .arrow {
          position: absolute;
          top: .2rem;
          width: .1rem;
          height: .2rem;
        }
  
        &.self {
          float: left;
          margin-left: 1.25rem;
          background: #FFF;
          border: .02rem solid #CACACA;
  
          .pic {
            left: -1rem;
          }
  
          .arrow {
            left: -.1rem;
            background: url("../images/zf_messageArrow1.png") no-repeat;
            background-size: 100% 100%;
          }
        }
  
        &.inter {
          float: right;
          margin-right: 1.25rem;
          background: #A2E45C;
          border: .02rem solid #96B474;
  
          .pic {
            right: -1rem;
          }
  
          .arrow {
            right: -.1rem;
            background: url("../images/zf_messageArrow2.png") no-repeat;
            background-size: 100% 100%;
          }
        }
      }
    }
  
    .keyBoard {
      position: absolute;
      left: 0;
      bottom: -.5rem;
      box-sizing: border-box;
      width: 100%;
      height: 5.16rem;
      background: url("../images/zf_messageKeyboard.png") no-repeat;
      background-size: 100% 100%;
  
      /*初始位置*/
      transform: translateY(3.7rem);
      transition: .3s;
  
      span {
        position: absolute;
        left: .9rem;
        top: .35rem;
        width: 4rem;
        height: .4rem;
        line-height: .4rem;
        font-size: .25rem;
      }
  
      .submit {
        display: none;
        position: absolute;
        right: .1rem;
        bottom: .6rem;
        width: 1.47rem;
        height: .74rem;
        background: url("../images/zf_messageChat.png") no-repeat;
        background-size: 100% 100%;
      }
    }
  }
  
  @keyframes messageListMove {
    from {
      transform: translateY(1rem);
      opacity: 0;
    }
    to {
      transform: translateY(0rem);
      opacity: 1;
    }
  }

  /*CUBE*/
.cubeBox {
  background: url("../images/zf_cubeBg.jpg") no-repeat;
  background-size: cover;

  .cube {
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -2.55rem 0 0 -2.55rem;
    width: 5.1rem;
    height: 5.1rem;

    li {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      img {
        display: block;
        width: 100%;
        height: 100%;
      }
    }
  }

  .tip {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    margin-left: -1.97rem;
    width: 3.94rem;
    height: .44rem;
  }
}

//=>在二维平面中实现3D效果
.cubeBox {
  //1.给需要实现3D变形元素所在的舞台设置“视距”(1000~2000)
  perspective: 2000px;

  .cube {
    //2.给需要操作的元素设置3D变形效果
    transform-style: preserve-3d;

    //3.基于TRASFORM实现3D变形
    li {
      &:nth-child(1) {
        transform: translateZ(2.55rem);
      }

      &:nth-child(2) {
        transform: translateZ(-2.55rem) rotateY(180deg);
      }

      &:nth-child(3) {
        transform: translateX(2.55rem) rotateY(90deg);
      }

      &:nth-child(4) {
        transform: translateX(-2.55rem) rotateY(-90deg);
      }

      &:nth-child(5) {
        transform: translateY(-2.55rem) rotateX(90deg);
      }

      &:nth-child(6) {
        transform: translateY(2.55rem) rotateX(-90deg);
      }
    }

    //4.给魔方一个初始的旋转角度，让其可以看到3D的效果（旋转后太大了，把魔方缩小一点）
    transform: scale(0.6) rotateX(-35deg) rotateY(35deg);
    transition: .3s; //=>后期让魔方旋转的时候有一个平稳的过渡动画效果
  }
}
